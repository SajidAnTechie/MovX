{"version":3,"sources":["Components/loader/SinglePageLoader.js","Components/singleMoviePage/style.js","Components/singleMoviePage/Details.js","Components/singleMoviePage/MovieoverView.js","Components/singleMoviePage/index.js","utilis/Header.js","utilis/style.js","api/apiKey.js","Components/errorPages/index.js"],"names":["SkeletonLoader","Container","Header","height","width","Row","Array","fill","map","n","index","Fragment","key","Col","md","MovieOverview","styled","div","MovieDetails","Details","movieData","className","release_date","status","budget","revenue","popularity","MovieOverView","MovieShowData","filmtime","runtime","Hours","Math","floor","minutes","MoviTime","moment","format","src","backdrop_path","alt","title","vote_average","overview","isArray","genres","i","name","SinglePageMovie","props","useState","setMovieShowData","Error","setError","Loading","setLoading","useEffect","source","axios","CancelToken","a","movie_id","match","params","id","get","apiKey","cancelToken","token","ViewData","data","console","log","isCancel","fetchViewData","cancel","children","HeaderWrapper","ButtonWrapper","button","Pagination","ErrorWrapper","HomeButton","exact","to"],"mappings":"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","file":"static/js/10.a5149fc4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Header from \"../../utilis/Header\";\nimport Skeleton from \"react-loading-skeleton\";\n\nconst SkeletonLoader = () => {\n  return (\n    <Container>\n      <Header>\n        <Skeleton height={30} width={\"100%\"} />\n      </Header>\n      <Row>\n        {Array(3)\n          .fill()\n          .map((n, index) => {\n            return (\n              <React.Fragment key={index}>\n                <Col md=\"6\">\n                  <Skeleton height={180} width={\"100%\"} />\n                </Col>\n                <Col md=\"6\">\n                  <Skeleton height={30} width={\"100%\"} />\n                  <br />\n                  <Skeleton width={\"100%\"} />\n                  <br />\n                  <Skeleton width={\"100%\"} />\n                  <br />\n                  <Skeleton height={100} width={\"100%\"} />\n                  <br />\n                  <Skeleton width={\"100%\"} />\n                  <br />\n                </Col>\n              </React.Fragment>\n            );\n          })}\n      </Row>\n    </Container>\n  );\n};\nexport default SkeletonLoader;\n","import styled from \"styled-components\";\n\nexport const MovieOverview = styled.div`\n  margin-top: 85px;\n  position: relative;\n  width: 100%;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: minmax(100px, auto);\n  grid-gap: 40px;\n  grid-auto-flow: dense;\n  margin-bottom: 50px;\n  @media (max-width: 1000px) {\n    grid-template-columns: repeat(1, 1fr);\n  }\n  h2 {\n    font-weight: 600;\n    font-size: 25px;\n    text-transform: uppercase;\n    @media (max-width: 1000px) {\n      font-size: 18px;\n    }\n  }\n  img {\n    width: 100%;\n  }\n  .rating {\n    margin-top: 20px;\n    font-size: 14px;\n    margin-bottom: 26px;\n    svg {\n      color: rgb(253, 183, 59);\n    }\n  }\n  p {\n    line-height: 31px;\n    font-size: 15px;\n    color: rgb(98, 107, 114);\n  }\n  .generes {\n    span {\n      color: rgb(98, 107, 114);\n    }\n  }\n`;\nexport const MovieDetails = styled.div`\n  margin-top: 85px;\n  position: relative;\n  width: 100%;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: minmax(100px, auto);\n  grid-gap: 40px;\n  grid-auto-flow: dense;\n  margin-bottom: 50px;\n  @media (max-width: 1000px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  .box {\n    border: 1px solid #eee;\n    border-radius: 6px;\n  }\n  .content {\n    padding: 12px;\n    h4 {\n      font-size: 1rem;\n      font-weight: 600;\n      @media (max-width: 1000px) {\n        font-size: 0.9rem;\n      }\n    }\n    p {\n      font-size: 0.9rem;\n      color: gray;\n      @media (max-width: 1000px) {\n        font-size: 0.7rem;\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { MovieDetails } from \"./style\";\nconst Details = ({ movieData }) => {\n  return (\n    <MovieDetails>\n      <div className=\"box\">\n        <div className=\"content\">\n          <h4>Release Date</h4>\n          <p>{movieData.release_date}</p>\n        </div>\n      </div>\n      <div className=\"box\">\n        <div className=\"content\">\n          <h4>Status</h4>\n          <p>{movieData.status}</p>\n        </div>\n      </div>\n      <div className=\"box\">\n        <div className=\"content\">\n          <h4>Budget</h4>\n          <p>{movieData.budget}</p>\n        </div>\n      </div>\n      <div className=\"box\">\n        <div className=\"content\">\n          <h4>Revenue</h4>\n          <p>{movieData.revenue}</p>\n        </div>\n      </div>\n      <div className=\"box\">\n        <div className=\"content\">\n          <h4>Popularity</h4>\n          <p>{movieData.popularity}</p>\n        </div>\n      </div>\n    </MovieDetails>\n  );\n};\nexport default Details;\n","import React from \"react\";\nimport MovieDetails from \"./Details\";\nimport { MovieOverview } from \"./style\";\nimport { Container } from \"react-bootstrap\";\nimport { AiFillStar } from \"react-icons/ai\";\nimport moment from \"moment\";\n\nconst MovieOverView = ({ MovieShowData }) => {\n  let filmtime = MovieShowData.runtime;\n\n  var Hours = Math.floor(filmtime / 60);\n  var minutes = filmtime % 60;\n  let MoviTime = moment(MovieShowData.release_date).format(\"MMM M Y\");\n  return (\n    <Container>\n      <MovieOverview>\n        <div className=\"box\">\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${MovieShowData.backdrop_path}`}\n            alt=\"Backdrop_image\"\n          />\n        </div>\n        <div className=\"movie_overview\">\n          <h2>{MovieShowData.title}</h2>\n          <p>\n            {Hours}hr {minutes}min<span className=\"ml-1 mr-1\">|</span>\n            {MoviTime}\n          </p>\n          <div className=\"rating\">\n            <span className=\"mr-1\">\n              <AiFillStar />\n            </span>\n            {MovieShowData.vote_average}/10 Rating\n          </div>\n          <h4>Overview</h4>\n          <p>{MovieShowData.overview}</p>\n          <div className=\"generes\">\n            Genres :\n            {Array.isArray(MovieShowData.genres) &&\n              MovieShowData.genres.map((n, i) => (\n                <span key={i} className=\"ml-1\">\n                  {n.name},\n                </span>\n              ))}\n          </div>\n        </div>\n      </MovieOverview>\n      <MovieDetails movieData={MovieShowData} />\n    </Container>\n  );\n};\n\nexport default MovieOverView;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ErrorPage from \"../errorPages\";\nimport apiKey from \"../../api/apiKey\";\nimport SiglePageLoader from \"../loader/SinglePageLoader\";\nimport MovieOverView from \"./MovieoverView\";\n\nconst SinglePageMovie = (props) => {\n  const [MovieShowData, setMovieShowData] = useState({});\n  const [Error, setError] = useState(null);\n  const [Loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    let source = axios.CancelToken.source();\n    const fetchViewData = async () => {\n      let movie_id = props.match.params.id;\n      try {\n        let ViewData = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${apiKey}&language=en-US`,\n          {\n            cancelToken: source.token,\n          }\n        );\n        setMovieShowData(ViewData.data);\n        setLoading(false);\n        console.log(ViewData.data);\n      } catch (error) {\n        if (!axios.isCancel(error)) {\n          setError(error);\n        }\n      }\n    };\n\n    fetchViewData();\n\n    return () => {\n      console.log(\"Component Unmount\");\n      source.cancel();\n    };\n  }, [props.match.params.id]);\n\n  return (\n    <React.Fragment>\n      {Error && <ErrorPage />}\n      {Loading && <SiglePageLoader />}\n      {!Loading && <MovieOverView MovieShowData={MovieShowData} />}\n    </React.Fragment>\n  );\n};\n\nexport default SinglePageMovie;\n","import React from \"react\";\nimport { HeaderWrapper } from \"./style\";\n\nconst Header = (props) => {\n  return (\n    <HeaderWrapper>\n      <h2>{props.children}</h2>\n    </HeaderWrapper>\n  );\n};\nexport default Header;\n","import styled from \"styled-components\";\n\nexport const HeaderWrapper = styled.div`\n  width: 100%;\n  margin-top: 80px;\n  margin-bottom: 25px;\n  h2 {\n    font-weight: 600;\n    text-transform: uppercase;\n    @media (max-width: 1000px) {\n      font-size: 1.25rem;\n    }\n  }\n`;\nexport const ButtonWrapper = styled.button`\n  width: 190px;\n  height: 50px;\n  border: 0;\n  background-color: rgb(255, 182, 53);\n  font-size: 12px;\n  border-radius: 6px;\n  color: rgb(23, 28, 32);\n  font-weight: bold;\n  :hover,\n  :focus {\n    background-color: rgb(232, 170, 60);\n    outline: none;\n  }\n  @media (max-width: 1000px) {\n    width: 177px;\n    height: 45px;\n    font-size: 11px;\n  }\n`;\n\nexport const Pagination = styled.div`\n  width: 100%;\n  text-align: center;\n  margin-bottom: 30px;\n  margin-top: 55px;\n  button {\n    margin-left: 12px;\n    width: 80px;\n    height: 31px;\n  }\n`;\n","const apiKey = \"9dc31ba314d7d80682e8c5180714a40e\";\n\nexport default apiKey;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Header from \"../../utilis/Header\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Error = () => {\n  const ErrorWrapper = styled.div`\n    width: 100%;\n    text-align: center;\n    p {\n      font-size: 15px;\n      color: rgb(98, 107, 114);\n    }\n  `;\n  const HomeButton = styled.button`\n    width: 67px;\n    height: 33px;\n    border: 0;\n    background-color: rgb(255, 182, 53);\n    font-size: 12px;\n    border-radius: 6px;\n    color: rgb(23, 28, 32);\n    font-weight: bold;\n    :hover,\n    :focus {\n      background-color: rgb(232, 170, 60);\n      outline: none;\n    }\n  `;\n  return (\n    <Container>\n      <ErrorWrapper>\n        <Header>Network Error</Header>\n        <p>It seems like you don't have internet connection</p>\n        <Link exact to=\"/\">\n          <HomeButton>Home</HomeButton>\n        </Link>\n      </ErrorWrapper>\n    </Container>\n  );\n};\n\nexport default Error;\n"],"sourceRoot":""}