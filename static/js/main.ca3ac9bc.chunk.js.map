{"version":3,"sources":["assests/logo.png","Components/Navbar/style.js","Components/Navbar/index.js","Components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarWrapper","styled","div","withRouter","props","useState","inputChange","setinputChange","Container","Navbar","expand","exact","to","className","src","Logo","alt","Toggle","aria-controls","Collapse","id","Nav","Form","inline","onSubmit","e","preventDefault","trim","length","history","push","FormControl","type","name","onChange","target","value","placeholder","Footer","FooterWrapper","Home","lazy","NowPlaying","TopRated","Upcoming","SinglePageMovie","SearchMovie","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,0iCCEpC,IAAMC,EAAgBC,IAAOC,IAAV,KCuDXC,eAnDC,SAACC,GAAW,IAAD,EACaC,mBAAS,IADtB,mBAClBC,EADkB,KACLC,EADK,KAczB,OACE,kBAACP,EAAD,KACE,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,MACb,kBAAC,IAAD,CAAMC,OAAK,EAACC,GAAG,IAAIC,UAAU,gBAC3B,yBAAKC,IAAKC,IAAMC,IAAI,UAEtB,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,qBAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKR,UAAU,WACb,kBAAC,IAAD,CAASF,OAAK,EAACC,GAAG,IAAIC,UAAU,YAAhC,QAGA,kBAAC,IAAD,CAASF,OAAK,EAACC,GAAG,YAAYC,UAAU,YAAxC,YAGA,kBAAC,IAAD,CAASF,OAAK,EAACC,GAAG,WAAWC,UAAU,YAAvC,aAIF,kBAACS,EAAA,EAAD,CAAMC,QAAM,EAACC,SA5BF,SAACC,GACpBA,EAAEC,iBACgC,IAA9BpB,EAAYqB,OAAOC,QAGvBxB,EAAMyB,QAAQC,KAAK,iBAAmBxB,KAwB5B,kBAAC,IAAD,MACA,kBAACyB,EAAA,EAAD,CACEC,KAAK,OACLC,KAAK,SACLC,SApCY,SAACT,GACzBlB,EAAekB,EAAEU,OAAOC,QAoCZC,YAAY,QACZxB,UAAU,oB,sWC5C1B,IAuBeyB,EAvBA,WACb,IAAMC,EAAgBtC,IAAOC,IAAV,KAgBnB,OACE,kBAACqC,EAAD,sBACkB,gDCfhBC,G,kBAAOC,gBAAK,kBAAM,+DAClBC,EAAaD,gBAAK,kBAAM,uDACxBE,EAAWF,gBAAK,kBAAM,uDACtBG,EAAWH,gBAAK,kBAAM,uDACtBI,EAAkBJ,gBAAK,kBAAM,gEAC7BK,EAAcL,gBAAK,kBAAM,uDAyBhBM,MAvBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,0CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOrC,OAAK,EAACsC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAO7B,OAAK,EAACsC,KAAK,qBAAqBC,UAAWR,IAClD,kBAAC,IAAD,CAAO/B,OAAK,EAACsC,KAAK,mBAAmBC,UAAWP,IAChD,kBAAC,IAAD,CAAOhC,OAAK,EAACsC,KAAK,mBAAmBC,UAAWN,IAChD,kBAAC,IAAD,CAAOjC,OAAK,EAACsC,KAAK,kBAAkBC,UAAWL,IAC/C,kBAAC,IAAD,CACElC,OAAK,EACLsC,KAAK,2BACLC,UAAWJ,MAIjB,kBAAC,EAAD,Q,MCpBcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ca3ac9bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5e3e5af1.png\";","import styled from \"styled-components\";\n\nexport const NavbarWrapper = styled.div`\n  background-color: rgb(253, 183, 59);\n  width: 100%;\n  img {\n    width: 100px;\n  }\n  a {\n    color: rgb(23, 28, 32) !important;\n    position: relative;\n    margin-right: 26px;\n    :focus {\n      outline: none;\n    }\n  }\n  .active {\n    font-weight: 700;\n    :before {\n      content: \"\";\n      position: absolute;\n      width: 100%;\n      height: 1px;\n      top: 100%;\n      left: 0px;\n      border: 1px solid;\n    }\n  }\n  form {\n    background-color: #fff;\n    border-radius: 100px;\n    padding: 0 13px;\n    @media (max-width: 700px) {\n      flex-flow: row !important;\n      margin-top: 20px;\n    }\n\n    input {\n      border: 0;\n      font-size: 0.875rem;\n      :focus {\n        box-shadow: none;\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport Logo from \"../../assests/logo.png\";\nimport { Navbar, Form, Nav, FormControl, Container } from \"react-bootstrap\";\nimport { NavLink, Link, withRouter } from \"react-router-dom\";\nimport { FaSistrix } from \"react-icons/fa\";\nimport { NavbarWrapper } from \"./style\";\nconst Navbars = (props) => {\n  const [inputChange, setinputChange] = useState(\"\");\n\n  const handleSearchInput = (e) => {\n    setinputChange(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputChange.trim().length === 0) {\n      return;\n    }\n    props.history.push(\"/search/movie/\" + inputChange);\n  };\n\n  return (\n    <NavbarWrapper>\n      <Container>\n        <Navbar expand=\"lg\">\n          <Link exact to=\"/\" className=\"navbar-brand\">\n            <img src={Logo} alt=\"Logo\" />\n          </Link>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <NavLink exact to=\"/\" className=\"nav-link\">\n                Home\n              </NavLink>\n              <NavLink exact to=\"/trending\" className=\"nav-link\">\n                Trending\n              </NavLink>\n              <NavLink exact to=\"/tvShows\" className=\"nav-link\">\n                TV Shows\n              </NavLink>\n            </Nav>\n            <Form inline onSubmit={handleSubmit}>\n              <FaSistrix />\n              <FormControl\n                type=\"text\"\n                name=\"seacrh\"\n                onChange={handleSearchInput}\n                placeholder=\"Movie\"\n                className=\"mr-sm-2\"\n              />\n            </Form>\n          </Navbar.Collapse>\n        </Navbar>\n      </Container>\n    </NavbarWrapper>\n  );\n};\n\nexport default withRouter(Navbars);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Footer = () => {\n  const FooterWrapper = styled.div`\n    width: 100%;\n    height: 49px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border: 1px solid #eee;\n    color: black;\n    margin-top: 49px;\n    font-weight: 700;\n\n    span {\n      font-size: 15px;\n      color: rgb(98, 107, 114);\n    }\n  `;\n  return (\n    <FooterWrapper>\n      Made By :&nbsp; <span>Sajid Ansari</span>\n    </FooterWrapper>\n  );\n};\nexport default Footer;\n","import React, { lazy, Suspense } from \"react\";\nimport Navbar from \"./Components/Navbar\";\nimport Footer from \"./Components/footer/footer\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nconst Home = lazy(() => import(\"./Components/Home\"));\nconst NowPlaying = lazy(() => import(\"./Components/AllNowPlayingMovies\"));\nconst TopRated = lazy(() => import(\"./Components/AlltopRatedMovies\"));\nconst Upcoming = lazy(() => import(\"./Components/AllUpcomingMovies\"));\nconst SinglePageMovie = lazy(() => import(\"./Components/singleMoviePage\"));\nconst SearchMovie = lazy(() => import(\"./Components/seacrhMovie\"));\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <Suspense fallback={<p>Loading...</p>}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/NowPlaying_Movies\" component={NowPlaying} />\n          <Route exact path=\"/ToPRated_Movies\" component={TopRated} />\n          <Route exact path=\"/UpComing_Movies\" component={Upcoming} />\n          <Route exact path=\"/view/movie/:id\" component={SinglePageMovie} />\n          <Route\n            exact\n            path=\"/search/movie/:movieName\"\n            component={SearchMovie}\n          />\n        </Switch>\n      </Suspense>\n      <Footer />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}